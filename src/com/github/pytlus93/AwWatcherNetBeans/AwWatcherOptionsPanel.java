/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.pytlus93.AwWatcherNetBeans;

import java.util.HashMap;
import java.util.Map;
import java.util.prefs.Preferences;
import org.openide.util.NbPreferences;

/**
 *
 * @author FiVrCz
 */
public class AwWatcherOptionsPanel extends javax.swing.JPanel {

   private final AwWatcherOptionsPanelController controller;

   AwWatcherOptionsPanel(AwWatcherOptionsPanelController controller) {
      this.controller = controller;
      initComponents();
   }

   /**
    * This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      lblFrequency = new javax.swing.JLabel();
      spFrequency = new javax.swing.JSpinner();
      lblPulseTime = new javax.swing.JLabel();
      spPulseTime = new javax.swing.JSpinner();
      cbDebug = new javax.swing.JCheckBox();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      taCustomFiletypes = new javax.swing.JTextArea();
      lblCustomFiletypes = new javax.swing.JLabel();

      lblFrequency.setLabelFor(spFrequency);
      org.openide.awt.Mnemonics.setLocalizedText(lblFrequency, org.openide.util.NbBundle.getMessage(AwWatcherOptionsPanel.class, "AwWatcherOptionsPanel.lblFrequency.text")); // NOI18N
      lblFrequency.setToolTipText(org.openide.util.NbBundle.getMessage(AwWatcherOptionsPanel.class, "AwWatcherOptionsPanel.lblFrequency.toolTipText")); // NOI18N

      spFrequency.setModel(new javax.swing.SpinnerNumberModel(5, 1, 60, 1));
      spFrequency.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
         public void propertyChange(java.beans.PropertyChangeEvent evt) {
            someFieldPropertyChanged(evt);
         }
      });

      lblPulseTime.setLabelFor(spPulseTime);
      org.openide.awt.Mnemonics.setLocalizedText(lblPulseTime, org.openide.util.NbBundle.getMessage(AwWatcherOptionsPanel.class, "AwWatcherOptionsPanel.lblPulseTime.text")); // NOI18N
      lblPulseTime.setToolTipText(org.openide.util.NbBundle.getMessage(AwWatcherOptionsPanel.class, "AwWatcherOptionsPanel.lblPulseTime.toolTipText")); // NOI18N

      spPulseTime.setModel(new javax.swing.SpinnerNumberModel(20, 1, 120, 1));
      spPulseTime.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
         public void propertyChange(java.beans.PropertyChangeEvent evt) {
            someFieldPropertyChanged(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(cbDebug, org.openide.util.NbBundle.getMessage(AwWatcherOptionsPanel.class, "AwWatcherOptionsPanel.cbDebug.text")); // NOI18N
      cbDebug.setToolTipText(org.openide.util.NbBundle.getMessage(AwWatcherOptionsPanel.class, "AwWatcherOptionsPanel.cbDebug.toolTipText")); // NOI18N
      cbDebug.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
      cbDebug.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
         public void propertyChange(java.beans.PropertyChangeEvent evt) {
            someFieldPropertyChanged(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AwWatcherOptionsPanel.class, "AwWatcherOptionsPanel.jLabel1.text")); // NOI18N
      jLabel1.setFocusable(false);

      org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AwWatcherOptionsPanel.class, "AwWatcherOptionsPanel.jLabel2.text")); // NOI18N
      jLabel2.setFocusable(false);

      taCustomFiletypes.setColumns(20);
      taCustomFiletypes.setRows(10);
      taCustomFiletypes.setTabSize(3);
      taCustomFiletypes.setToolTipText(org.openide.util.NbBundle.getMessage(AwWatcherOptionsPanel.class, "AwWatcherOptionsPanel.taCustomFiletypes.toolTipText")); // NOI18N
      taCustomFiletypes.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
         public void propertyChange(java.beans.PropertyChangeEvent evt) {
            someFieldPropertyChanged(evt);
         }
      });
      jScrollPane1.setViewportView(taCustomFiletypes);

      org.openide.awt.Mnemonics.setLocalizedText(lblCustomFiletypes, org.openide.util.NbBundle.getMessage(AwWatcherOptionsPanel.class, "AwWatcherOptionsPanel.lblCustomFiletypes.text")); // NOI18N
      lblCustomFiletypes.setToolTipText(org.openide.util.NbBundle.getMessage(AwWatcherOptionsPanel.class, "AwWatcherOptionsPanel.lblCustomFiletypes.toolTipText")); // NOI18N

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane1)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFrequency)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(lblPulseTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spPulseTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(26, 26, 26)
                        .addComponent(cbDebug))
                     .addComponent(lblCustomFiletypes))
                  .addGap(0, 23, Short.MAX_VALUE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblFrequency)
               .addComponent(spFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel1)
               .addComponent(lblPulseTime)
               .addComponent(spPulseTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel2)
               .addComponent(cbDebug))
            .addGap(18, 18, 18)
            .addComponent(lblCustomFiletypes)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

   private void someFieldPropertyChanged(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_someFieldPropertyChanged
      this.controller.changed();
   }//GEN-LAST:event_someFieldPropertyChanged


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JCheckBox cbDebug;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JLabel lblCustomFiletypes;
   private javax.swing.JLabel lblFrequency;
   private javax.swing.JLabel lblPulseTime;
   private javax.swing.JSpinner spFrequency;
   private javax.swing.JSpinner spPulseTime;
   private javax.swing.JTextArea taCustomFiletypes;
   // End of variables declaration//GEN-END:variables

   private String lastCustomFileTypes;
   private boolean lastResult;

   boolean valid() {
      if (!(spFrequency.getValue() instanceof Integer) || !(spPulseTime.getValue() instanceof Integer)) {
         return false;
      }

      if (taCustomFiletypes.getText().equals(lastCustomFileTypes)) {
         return lastResult;
      }

      lastCustomFileTypes = taCustomFiletypes.getText();

      if (lastCustomFileTypes.isEmpty()) {
         return lastResult = true;

      }
      Map<String, String> exts = new HashMap<String, String>();
      for (String line : taCustomFiletypes.getText().trim().split("\\r?\\n", -1)) {
         if (line.isEmpty()) {
            return lastResult = false;
         }
         String[] parts = line.trim().split("=", -1);
         if (parts.length != 2) {
            return lastResult = false;
         }
         if (exts.containsKey(parts[0])) {
            return lastResult = false;
         }
         exts.put(parts[0], parts[1]);
      }
      return lastResult = true;
   }

   void store() {
      Preferences prefs = NbPreferences.forModule(AwWatcherNetBeans.class);
      prefs.putBoolean("Debug", this.cbDebug.isSelected());
      prefs.putInt("Frequency", (int) spFrequency.getValue());
      prefs.putInt("PulseTime", (int) spPulseTime.getValue());
      prefs.put("CustomFileTypes", taCustomFiletypes.getText());
   }

   void load() {
      Preferences prefs = NbPreferences.forModule(AwWatcherNetBeans.class);
      this.cbDebug.setSelected(prefs.getBoolean("Debug", false));
      this.spFrequency.setValue(prefs.getInt("Frequency", 5));
      this.spPulseTime.setValue(prefs.getInt("PulseTime", 20));
      this.taCustomFiletypes.setText(prefs.get("CustomFileTypes", ""));
   }

   private static boolean isInteger(String str) {
      try {
         Integer.parseInt(str);
         return true;
      } catch (NumberFormatException nfe) {
         return false;
      }
   }
}
